initSidebarItems({"enum":[["Tag","Tags of the various executions inside a IOI task."],["TaskInfo","Information about a parsed task, returned with the `--task-info` option."]],"fn":[["find_task","Search for a valid task directory, starting from base and going at most `max_depth` times up."],["get_sanity_check_names","Return a comma separated list of the names of all the sanity checks."]],"macro":[["bind_exec_callbacks","Bind the start/done/skip callbacks of an execution to a ui message sender which sends to the UI messages with the correct status field."],["bind_exec_io","Bind the input/output of an execution to the input and output file of a testcase. It correctly chooses if using stdin/stdout or using normal files by looking at the value set in the `Task`."],["cwrite","Write to `$self.stream`, in the color specified as second parameter. The arguments that follow will be passed to `write!`."],["cwriteln","Write to `$self.stream`, in the color specified as second parameter. The arguments that follow will be passed to `writeln!`."]],"mod":[["ioi","The IOI task format."],["terry","The Terry task format."],["ui","The UI functionality for the task formats."]],"struct":[["DATA_DIR","Directory where the data files are stored. It is taken from the `TM_DATA_DIR` environment variable if present, otherwise it will be defaulted to the path of the source tree."],["EvaluationConfig","Configuration of the evaluation of a task."],["EvaluationData","The data for an evaluation, including the DAG and the UI channel."],["SourceFile","Wrapper around `task_maker_lang::SourceFile` that also sends to the UI the messages about the compilation, making the compilation completely transparent to the `SourceFile`."],["VALID_TAGS","The list of all the ExecutionTags used for the evaluation."]],"trait":[["TaskFormat","Trait that defines the capabilities of a task format, providing a UI and the parsing and execution abilities."],["UISender","What can send `UIMessage`s."]]});