searchState.loadedDescShard("task_maker_rust", 0, "task-maker-rust\nThis mod exposes an interface for setting up and running …\nSecond step: connect to an executor (either local or …\nThird step: start the UI thread.\nFirst step of the execution: take a task and build the …\nStart the local executor or connect to a remote one.\nFinally, start the execution and wait until it ends or it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>RuntimeContext</code> for the given task. In the …\nChange the default sandbox runner for the local executor.\nNow that we are connected to an executor, we can start the …\nRender to string the <code>ExecutionDAG</code> in DOT format.\nAdds methods for failing without panic. Like <code>expect</code> but …\nFail exiting with <code>1</code> if the value is not present, printing …\nFail exiting with <code>1</code> if the value is not present, printing …\nFail exiting with <code>1</code> if the value is not present. Otherwise …\nThe task directory has been cleaned.\nThe evaluation has completed.\nThe result of an evaluation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEntry point of the local execution.\nRun the local evaluation of some actions (either building …\nInclude the solutions in the booklet\nClear the task directory and exit\nStore the DAG in DOT format inside of bin/DAG.dot\nCopy the executables to the bin/ folder\nCopy the logs of some executions to the bin/logs/ folder\nDisable the Curses UI and fallback to PrintUI if verbose …\nDo not write any file inside the task directory\nEnable the logs according to the specified configuration.\nRun the evaluation on a remote server instead of locally\nDo not run in parallel time critical executions on the …\nGive to the solution some extra memory before being killed\nGive to the solution some extra time before being killed\nExecute only the solutions whose names start with the …\nUse the specified options to find a task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep all the sandbox directories\nMaximum size of the storage directory, in MiB\nLook at most for this number of parents for searching the …\nWhen the storage is flushed, this is the new maximum size, …\nThe name to use for the client in remote executions\nDisable the cache for this comma separated list of tags\nDo not build the statement files and the booklets\nThe number of CPU cores to use.\nPriority of the evaluations spawned by this invocation of …\nForce this seed instead of a random one.\nList of sanity checks to skip (–help for the list).\nEvaluate only the solution with the specified path\nGet the store directory of this configuration. If nothing …\nWhere to store the storage files, including the cache\nDirectory of the task\nMake an <code>EvaluationConfig</code> from this command line options.\nWhich UI to use, available UIs are: print, raw, curses, …\nVerbose mode (-v, -vv, -vvv, etc.). Note that it does not …\nParse the server url address and try to connect to that …\nRun the sandbox integrated in the task-maker-tools binary.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun the sandbox for an execution.\nTool that generates the autocompletion scripts inside the …\nReturns the argument unchanged.\nWrite the @check directly to the solution files.\nCalls <code>U::from(self)</code>.\nOverwrite existing @check rules.\nInclude the solutions in the booklet\nDirectory of the context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLook at most for this number of parents for searching the …\nDirectory of the task.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of input files to generate for each batch.\nReturns the argument unchanged.\nArguments to pass to the generator. The value ‘{}’ …\nCalls <code>U::from(self)</code>.\nPath to the solution to check against the official …\nMaximum number of seconds the checker can run.\nList of additional arguments to pass to the compiler.\nReturns the argument unchanged.\nWhere to store fuzzing data.\nCalls <code>U::from(self)</code>.\nNumber of fuzzing process to spawn.\nMaximum fuzzing time in seconds.\nDon’t run the evaluation for building the output files.\nDon’t print the fuzzer output to the console, but …\nAdditional sanitizers to use.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhere to write the autocompletion files\nAdd the @check comments to the solutions.\nCompile just the booklet for a task or a contest.\nClear a task directory\nGenerate and search for an input file that make a solution …\nFuzz the checker of a task.\nGenerate the autocompletion files for the shell\nRun the sandbox instead of the normal task-maker.\nWipe the internal storage of task-maker\nRun a command inside a sandbox similar to the one used by …\nSpawn an instance of the server\nObtain the information about a task.\nPrint the TypeScript type definitions\nSpawn an instance of a worker\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhich tool to use\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandler of the <code>reset</code> tool. This tool will prompt the user …\nCommand to execute inside the sandbox. If not specified, …\nReturns the argument unchanged.\nUser id.\nCalls <code>U::from(self)</code>.\nMemory limit for the sandbox, in KiB.\nMount /proc inside the sandbox\nMount /tmp and /dev/null inside the sandbox\nList of additional directory mounted read-only inside the …\nPrevent forking.\nStack limit for the sandbox, in KiB.\nUser id.\nWorking directory of the sandbox.\nAddress to bind the server on for listening for the clients\nPassword for the connection of the clients\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEntry point for the server.\nAddress to bind the server on for listening for the workers\nPassword for the connection of the workers\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProduce JSON output.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEntry point for the worker.\nThe name to use for the worker in remote executions\nAddress to use to connect to a remote server\nID of the worker (to differentiate between multiple …")