searchState.loadedDescShard("task_maker_format", 0, "Task parsing and execution using computation DAGs.\nThe solution scored 100% of the testcase.\nThe solution should get “Accepted” on all the …\nThe testcase scored the maximum amount of points.\nThe sanity check verifies the attachments.\nCompilation of the booklet.\nThe sanity check verifies the checker.\nChecking of a solution.\nDirectory where the data files are stored. It is taken …\nEvaluation of a solution.\nConfiguration of the evaluation of a task.\nThe data for an evaluation, including the DAG and the UI …\nGeneration of a testcase.\nThe task is IOI-like.\nThe task is IOI-like.\nThe sanity check verifies the input/output files.\nThe solution exceeded the memory limit.\nThe solution should get “Memory Limit Exceeded” on at …\nDo not write the binary anywhere.\nThe solution is partially correct.\nThe solution should get “Partial Score” on at least …\nThe testcase scored more than zero, but not the maximum.\nWrite the binary to this path, relative to the base path.\nThe solution crashed.\nThe solution should get “Runtime Error” on at least …\nCategory of a sanity check.\nThe status of a testcase that got scored.\nA solution to evaluate. This includes the source file and …\nA check to perform on a solution, against a subtask.\nThe expected result of a solution in a set of subtasks.\nSome information about a solution.\nThe sanity check verifies the solutions.\nWrapper around <code>task_maker_lang::SourceFile</code> that also sends …\nThe sanity check verifies the statement files.\nTags of the various executions inside a IOI task.\nThe sanity check verifies general properties of the task.\nThe format of the task. A task format, providing a UI and …\nInformation about a parsed task, returned with the …\nThe task is Terry-like.\nThe task is Terry-like.\nResult of the evaluation of a solution on a testcase.\nThe solution timed out.\nThe solution should get “Time Limit Exceeded” on at …\nWhat can send <code>UIMessage</code>s.\nThe list of all the ExecutionTags used for the evaluation.\nThe solution exceeded the wall time limit.\nThe solution should get “Wallclock Time Limit Exceeded”…\nWrite the binary to a file in the same place as the source …\nInformation about where to write the binary of the …\nThe output is wrong.\nThe solution should get “Wrong Answer” on at least one …\nThe testcase scored zero points.\nThe solution should get “WrongAnswer”, “…\nAdd a diagnostic message to the UI.\nSend a diagnostic message to the UI.\nGet a compact representation of this result.\nString version of this category.\nGet the string representation of this <code>SolutionCheckResult</code>, …\nBind the start/done/skip callbacks of an execution to a ui …\nBind the input/output of an execution to the input and …\nInclude the solutions in the booklet.\nAdd the executions required for evaluating this task to …\nCheck if this result is valid with respect to the actual …\nThe set of checks to perform on the solution.\nThe list of checks specified inside the source file.\nClean the task folder removing the files that can be …\nSpan of this check.\nWrite to <code>$self.stream</code>, in the color specified as second …\nWrite to <code>$self.stream</code>, in the color specified as second …\nThe DAG with the evaluation data.\nList of disabled sanity check names.\nDo not write any file inside the task directory.\nPrepare the source file if needed and return the …\nPrepare an execution of the source file, eventually adding …\nTry to extract the list of <code>SolutionCheck</code> from a file.\nSearch all the solutions matching the provided pattern in …\nSearch for a valid task directory, starting from base and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect the correct status based on the score of a …\nReturn a list of all the sanity check.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IOI task format.\nThe name of the language of this solution.\nReturn the set of matching minimal results.\nThe name of this solution.\nCrate a new <code>EvaluationData</code> returning the data and the …\nCreate a new <code>Solution</code> for a given source file.\nCreate a new <code>SolutionCheck</code> with the given result, that …\nMake a new <code>SourceFile</code>. See <code>task_maker_lang::SourceFile</code> for …\nDo not build the statement files and the booklets.\nMake a <code>WriteBinTo::Path</code>.\nGet the root directory of the task.\nThe path on disk of this solution.\nPrepare an execution of the source file, eventually adding …\nWhat this category is about.\nThe expected result of the solution.\nHook called after the execution completed, useful for …\nForce this seed in terry evaluations.\nSend that <code>UIMessage</code> to the UI.\nThe sender of the UI.\nExecute only the solutions whose names start with the …\nExecute only the solution with the specified paths, that …\nThe list of solutions to evaluate.\nList all <code>SolutionCheckResult</code> sorted by …\nA reference to the source file of this solution.\nThe pattern that should match the name of the subtask to …\nGet the task information.\nRoot directory of the task.\nThe Terry task format.\nThe UI functionality for the task formats.\nGet an appropriate <code>UI</code> for this task.\nThe solution scored 100% of the testcase.\nSkip the validation and assume the input file is valid.\nBase priority for booklets compilation.\nThe solution is a single file that will be executed once …\nThe internal data of a task of type <code>Batch</code>.\nA <code>Booklet</code> is a pdf file containing the statements of some …\nConfiguration of a <code>Booklet</code>, including the setting from the …\nThe status of the compilation of a dependency of a booklet.\nThe status of the compilation of a booklet.\nTemplate to use to render the <code>booklet.tex</code> file.\nWhich tool to use to compute the score on a testcase given …\nChecker is running.\nThe solution is executed in parallel with a manager and …\nThe internal data of a task of type <code>Batch</code>.\nPart of the schema of <code>contest.yaml</code>, used for extracting …\nUse a custom checker based on an executable that can …\nUse a custom command to generate the input file. The file …\nUse a custom command to check if the input file is valid. …\nUse a custom command to generate the output file. The task …\nBase priority for the evaluation executions.\nThe generation of the testcase has failed.\nSomething went wrong.\nCommunication is achieved by using the pipes passed in …\nBase priority for the generation executions.\nThe input file has been generated.\nThe input file is generating.\nInformation about a generic IOI task.\nTask information structure.\nThe source of the input files. It can either be a …\nAn input file validator is responsible for checking that …\nA simple struct that generates input validators for a …\nThe solution exceeded the memory limit.\nTake the minimum of all the testcases, formally:\nNot an actual task.\nThe output generator is not available.\nThe source of the output files. It can either be a …\nThe solution is partially correct.\nThe generation has not started yet.\nThe solution has not started yet.\nThe solution crashed.\nMaximum number of bytes of the captured standard error.\nThis struct will manage the scores of a solution in a task …\nThe generation has been skipped.\nThe evaluation has been skipped.\nThe outcome of the execution of a check on a subtask.\nState of the evaluation of a solution.\nState of the evaluation of a subtask.\nState of the evaluation of a testcase.\nThe output file has been generated.\nThe solution exited successfully, waiting for the checker.\nThe output file is generating.\nThe solution is running.\nA statement is a <code>.tex</code> file with all the other assets …\nThe configuration of a <code>Statement</code>.\nUse the static file as input. The file will be copied …\nUse the static file as output. The file will be copied …\nCommunication is achieved by using stdin/stdout.\nState of the generation of a subtask.\nIn IOI tasks the subtask numbers are non-negative 0-based …\nA subtask of a IOI task.\nSum the score of all the testcases, formally:\nThe file name of the input file that the <code>InputValidator</code> …\nAttachment of the task.\nLimits of the task.\nScoring for the task.\nStatement of the task.\nInfo of the subtasks.\nThe type of the task. This changes the behavior of the …\nStatus of the evaluation of a solution on a testcase.\nState of the generation of a testcases.\nStatus of the generation of a testcase input and output.\nIn IOI tasks the testcase numbers are non-negative 0-based …\nA testcase of a IOI task.\nThe aggregator of testcase scores for computing the …\nThe solution timed out.\nThe state of a IOI task, all the information for the UI …\nThe type of communication for the solution in a …\nThe input file has been validated.\nThe input file is being validated.\nThe solution exceeded the wall time limit.\nUse a built-in white diff checker that scores 1.0 if the …\nThe output is wrong.\nAdd a <code>Statement</code> to this booklet.\nApply a <code>UIMessage</code> to this state.\nBind the input/output of an execution to the input and …\nSome(relative_path) for a front page for the booklet.\nThe status of the booklets\nThe booklets to compile for this task.\nBuild the booklet, eventually coping the final PDF to the …\nAdd the executions required for evaluating this task to …\nBuild all the dependencies of this statement, returning a …\nThe check that originated this outcome.\nThe checker to use for this task.\nThe result of the checker.\nClean the task folder removing the files that can be …\nThe status of the compilations.\nReturn a ref to the configuration of the statement.\nConfiguration of the booklet.\nThe configuration of this evaluation.\nFind and parse the contest.yaml in the provided contest …\nThe date of the contest.\nThe date of the contest.\nThe state of all the dependencies\nThe list of the dependencies of this subtask.\nThe description of the contest.\nThe description of the contest.\nTextual description of the subtask. (deprecated)\nWhere to copy the booklet.\nDiagnostic context.\nThe difficulty of the task.\nAn integer that defines the difficulty of the task. Used …\nThe status of the evaluations of the solutions.\nThe status of the executor.\nCreate a “fake” <code>IOITask</code> that will not contain any data.\nThe font encoding of the tex file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild the <code>BookletConfig</code> from a contest.\nMake a new <code>StatementConfig</code> from an instance of a …\nObtain a validator for the given subtask.\nResult of the generation.\nThe state of the generation of the testcases.\nThe graders registered for this task.\nWhether the testcase evaluation has completed, either …\nThe id of the subtask.\nThe id of the testcase.\nThe input file of the task, empty for <code>stdin</code>.\nThe input file for the solutions, usually <code>Some(&quot;input.txt&quot;)</code>…\nThe input encoding of the tex file.\nThe generated input file UUID. This is set only after the …\nThe generator of the input file for this testcase.\nThe validator for the input files of this subtask.\nThe generator of validators for the various subtasks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe path to the intro page.\nChecks whether the resources used by a solution on a …\nWhether this subtask was created automatically since no …\nWhether the testcase evaluation has completed with a …\nWhether the testcase evaluation has completed successfully.\nCheck if in the provided path there could be a IOI-like …\nThe <code>italian_yaml</code> format is defined by <code>cms</code> and it’s the …\nThe language to use for this booklet, e.g. <code>&quot;english&quot;</code>.\nThe location of the contest.\nThe location of the contest.\nThe logo of the contest.\nThe logo of the contest.\nFind all the <code>Booklet</code> it makes sense to build for all the …\nFind all the <code>Booklet</code> it makes sense to build for a single …\nThe source file of the manager that communicates with the …\nThe maximum score of this task.\nThe maximum score of the subtask, must be &gt;= 0.\nThe memory limit of the task.\nThe memory limit in MiB of the execution of the solution, …\nA message representing this status.\nThe name of the task.\nThe name of the task (the short one).\nThe name of the subtask.\nMake a new <code>Booklet</code> using the specified configuration.\nMake a new <code>Statement</code> from a <code>.tex</code> file and its …\nGenerate the task information from the provided <code>Task</code>.\nMake a new, empty, <code>SolutionEvaluationState</code>.\nMake a new <code>UIState</code>.\nMake a new <code>ScoreManager</code> based on the subtasks and …\nBuild a generator based on a generating function.\nTry to make a <code>Task</code> from the specified path. Will return <code>Err</code>…\nMake a new instance of <code>TestcaseInfo</code>.\nScore of the subtask, normalized from 0.0 to 1.0.\nNumber of solution processes to spawn in parallel in a …\nThe generated official output file UUID. This is set only …\nThe output file of the task, empty for <code>stdout</code>.\nThe output file for the solutions, usually …\nThe default output generator for this task, if any.\nThe generator of the output file for this testcase.\nReturn a list of all the <code>\\usepackage</code> used by the statement.\nGet the root directory of the task.\nThe path of the <code>.tex</code> file.\nPath of the directory of the task.\nGet the path relative to the task’s root.\nThe result of the solution.\nEvaluate the checks of all the solutions.\nHook called after the execution completed, useful for …\nSanity checks for IOI-like tasks.\nThe sanity checks attached to this task. Wrapped in Arc …\nStore the score of the testcase and eventually compute the …\nThe score on that testcase\nScore of the subtask.\nScore of the solution.\nThe number of decimal digits when displaying the scores.\nWhether to show the solutions in the booklet.\nWhether to show the summary of the task.\n<code>Some(&quot;True&quot;)</code> if the time and memory limits should be put …\nResult of the solution.\nThe path of the solution.\nThe set of solutions that will be evaluated.\nThe span of the definition of this subtask.\nThe list of <code>Statement</code>s that are included in this booklet.\nStatus of the generation.\nThe status of the execution.\nThe status of the execution.\nThe status of the execution.\nThe id of the subtask this outcome refers to.\nThe state of the evaluation of the subtasks.\nThe list of the subtasks.\nWhether the check was successful or not.\nThe level of the syllabus of the task.\nAn integer that defines the level inside a <em>syllabus</em> (for …\nThe task.\nGet the task information.\nThe type of the task.\nThe list of the tasks in the contest (in the correct …\nThe aggregator to use to compute the score of the subtask …\nState of the testcases of this subtask.\nThe state of the evaluation of the testcases.\nThe list of the testcases.\nThe testcases inside this subtask.\nThe original testcases inside this subtask.\nReturn the <em>tex</em> source file of the statement, patched with …\nThe time limit of the task.\nThe time limit for the execution of the solutions, if <code>None</code> …\nThe title of the task.\nThe title of the task (the long one).\nThe checker may return a message to be translated. This …\nGet an appropriate <code>UI</code> for this task.\nThe type of communication for the solution in a …\nResult of the validation.\nThe set of valid Unicode General Categories for the …\nGiven the path to the task directory, try to parse the …\nReturn the list of sanity checks excluding the ones with …\nMake a new <code>SanityChecks</code> for a IOI task skipping the checks …\nThe possible statuses of the validation of a test case.\nThe testcase is present but its format is invalid.\nThe testcase is not present in the output file.\nThe testcase is present and correctly parsed.\nThe type of the seed of a generator for an input file.\nA message with an associated severity.\nThe feedback part of the outcome.\nThe feedback of a test case.\nThe output of the checker for a solution.\nThe validation part of the outcome of a solution.\nThe validation outcome of a test case.\nInformation about a generic Terry task.\nTask information structure.\nThe alerts sent by the checker regarding the validation.\nThe alerts sent by the checker regarding the feedback.\nAdd the executions required for evaluating this task to …\nThe validation of the test cases, in the same order as the …\nThe feedback of each testcase, in the same order as the …\nThe checker of input/output files of this task.\nClean the task folder removing the files that can be …\nWhether this testcase is correct.\nThe title of the task (the long one).\nThe title of the task (the long one).\nThe feedback outcome of the solution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe generator of input files of this task.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if in the provided path there could be a Terry-like …\nThe maximum score for this task.\nThe maximum score for this task.\nAn optional message associated to the test case.\nAn optional message associated to the test case.\nThe content of the alert.\nThe name of the task (the short one).\nThe name of the task (the short one).\nGenerate the task information from the provided <code>Task</code>.\nTry to make a <code>Task</code> from the specified path. Will return <code>Err</code>…\nThe official solution of this task, if any. Will be …\nGet the root directory of the task.\nPath of the directory of the task.\nHook called after the execution completed, useful for …\nThe sanity checks attached to this task. Wrapped in Arc …\nThe score normalized from 0.0 to 1.0.\nThe severity of the alert message.\nThe status of the testcase.\nGet the task information.\nGet an appropriate <code>UI</code> for this task.\nThe validation outcome of the solution.\nThe validator of input files of this task.\nThe BLUE color to use with <code>cwrite!</code> and <code>cwriteln!</code>\nThe bold style to use with <code>cwrite!</code> and <code>cwriteln!</code>\nAn update on the compilation status.\nThe status of the compilation of a file.\nThe <code>CursesUI</code>.\nA diagnostic message has been emitted.\nThe <code>Execution</code> has been completed.\nThe compilation has completed.\nThe compilation has failed.\nUI that prints to <code>stdout</code> the ending result of the …\nCollection of utilities for drawing the finish UI.\nThe GREEN color to use with <code>cwrite!</code> and <code>cwriteln!</code>\nThe compilation of a booklet.\nThe compilation of a dependency of a booklet. It can be …\nThe checking of a solution in a IOI task.\nThe evaluation of a solution in a IOI task.\nThe generation of a testcase in a IOI task.\nThe solution of a testcase in a IOI task.\nThe score of a subtask is ready.\nThe information about the task which is being run.\nThe score of a task is ready.\nThe score of a testcase is ready.\nThe validation of a testcase in a IOI task.\nThe <code>JsonUI</code>.\nThis UI will print to stdout the UI messages as json.\nThe ORANGE color to use with <code>cwrite!</code> and <code>cwriteln!</code>.\nThe <code>Execution</code> is known to the DAG and when all its …\nThe compilation is known but it has not started yet.\nThe <code>PrintUI</code>.\nA simple UI that will print to stdout the human readable …\nThe RED color to use with <code>cwrite!</code> and <code>cwriteln!</code>\nThe <code>RawUI</code>.\nThis UI will print to stdout all the raw information it …\nThe compilation is running on a worker.\nThe RED color to use with <code>cwrite!</code> and <code>cwriteln!</code>, without …\nAn update on the status of the executor.\nThe <code>SilentUI</code>.\nThis UI will never print anything.\nAt least one of its dependencies have failed, the <code>Execution</code>…\nThe compilation has been skipped.\nThe list of solutions that will be evaluated.\nThe <code>Execution</code> has been started on a worker.\nA simple printer that outputs to stdout. This can be used …\nA message asking the UI to exit.\nThe checking of a solution in a Terry task.\nThe generation of a testcase in a Terry task.\nThe solution of a testcase in a Terry task.\nThe outcome of a solution in a Terry task.\nThe information about the task which is being run.\nThe validation of a testcase in a Terry task.\nThe trait that describes the UI functionalities.\nChannel type for receiving <code>UIMessage</code>s.\nChannel type for sending <code>UIMessage</code>s.\nThe status of an execution.\nA message sent to the UI.\nThe sender of the UIMessage\nThe state of a task, all the information for the UI are …\nThe type of the UI to use, it enumerates all the known UI …\nThis trait describes the behavior of writers that support …\nThe YELLOW color to use with <code>cwrite!</code> and <code>cwriteln!</code>\nApply a <code>UIMessage</code> to this state.\nApply to this <code>CompilationStatus</code> a new <code>UIExecutionStatus</code>.\nUtilities for writing UIs with Curses.\nPrint the final results using a finish UI.\nMake the UI print the ending results.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind the maximum length of the solutions name from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if the underlying writer must …\nMake a new PrintUI.\nMake a new <code>FinishUIUtils</code> borrowing a <code>StandardStream</code>.\nMake a new <code>JsonUI</code>.\nMake a new RawUI.\nMake a new SilentUI.\nMake a new pair of UIMessageSender and ChannelReceiver.\nProcess a new UI message.\nPrint the final state of the UI.\nPrint all the compilation statuses.\nPrint the diagnostics.\nPrint a message for the non-successful variants of the …\nPrint the time and memory usage of an execution.\nReset the current color settings to their original …\nSend a message to the channel.\nSet the color settings of the writer.\nSet the current hyperlink of the writer.\nThe actual stream.\nReturns true if and only if the underlying writer supports …\nReturns true if and only if the underlying writer supports …\nThe result of the compilation.\nThe result of the compilation.\nThe standard error of the compilation.\nThe standard error of the compilation.\nThe standard output of the compilation.\nThe standard output of the compilation.\nThe result of the execution.\nThe UUID of the worker.\nThe name of the booklet.\nThe diagnostic message.\nThe compilation of this file.\nThe message associated with the score.\nThe name of the booklet.\nThe name of the dependency.\nThe normalized score, a value between 0 and 1\nThe number of the parts the evaluation of this solution is …\nThe number of steps of the compilation of this dependency.\nThe outcome of the solution. <code>Err</code> is caused by an invalid …\nThe index of the piece of evaluation of this solution.\nThe score of the testcase.\nThe score of the subtask.\nThe score of the task.\nThe seed used to generate the input file.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe path of the solution.\nThe information of the solutions to evaluate.\nThe status of the executor.\nThe status of the compilation.\nThe status of the generation.\nThe status of the validation.\nThe status of the solution.\nThe status of the solution.\nThe status of the solution. Note that a failure of this …\nThe status of the compilation.\nThe status of this step.\nThe status of the generation.\nThe status of the validation.\nThe status of the solution.\nThe status of the checker.\nThe index (0-based) of the step of this compilation.\nThe id of the subtask.\nThe id of the subtask.\nThe id of the subtask.\nThe id of the subtask.\nThe id of the subtask.\nThe id of the subtask.\nThe id of the subtask.\nThe task information.\nThe task information.\nThe id of the testcase.\nThe id of the testcase.\nThe id of the testcase.\nThe id of the testcase.\nThe id of the testcase.\nThe id of the testcase.\nBlue color.\nBold.\nA drawer for the frames of the UI.\nA generic animated UI for tasks, dynamically refreshing …\nThe type of the terminal with its backend.\nGreen color.\nOrange color.\nRed color.\nYellow color.\nDraw a frame of the UI using the provided state, onto the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the rect of the inner rect of a block with the borders.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new generic <code>CursesUI</code>.\nRender a block with the specified title.\nDraw the server status block.")