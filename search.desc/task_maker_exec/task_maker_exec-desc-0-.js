searchState.loadedDescShard("task_maker_exec", 0, "DAG execution dispatching the tasks to the workers.\nInformation about a client of the scheduler.\nA fake sandbox that don’t actually spawn anything and …\nThis is a client of the <code>Executor</code>, the client is who sends …\nThe current status of the <code>Executor</code>, this is sent to the …\nStatus of a worker of an <code>Executor</code>.\nSomething able to spawn a sandbox, wait for it to exit and …\nA fake sandbox that don’t actually spawn anything and …\nThe worker is the component that receives the work from …\nAn handle of the connection to the worker.\nInformation about the job the worker is currently doing.\nUUID and name of the client who owns the job.\nList of the connected workers with their uuid, name and if …\nWhat the worker is currently working on.\nDerive the encryption key from a password string.\nRe-export <code>ductile</code> since it’s sensible to any version …\nSince when the job started.\nEvaluate a DAG locally spawning a new <code>LocalExecutor</code> with …\nBegin the evaluation sending the DAG to the server, …\nThe supported executors.\nFinds the location of the <code>task-maker-tools</code> executable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a status based on a <code>Duration</code> (the one sent in the …\nThe name of the job the worker is currently doing.\nThe name of the worker.\nName of the worker.\nThe name of the client.\nMake a new worker attached to a <code>FileStore</code>, will return a …\nMake a new worker with an already connected channel.\nThe protocol related structs and enums.\nNumber of executions waiting for workers.\nThe channel that receives messages from the server.\nSpawn a sandbox with the provided configuration, set the …\nThis mod contains the sandbox-related code. It interfaces …\nThe channel that sends messages to the worker.\nThe identifier of the worker.\nUUID of the worker.\nUnique identifier of the client.\nNumber of executions waiting for dependencies.\nThe worker body, this function will block until the worker …\nThe server accepted the connection of the client, the …\nAn Executor that runs locally by spawning a number of …\nThe server rejected the connection of the client, the …\nMessage sent only by remote clients and workers for …\nMessage sent only by the server in response of a …\nAn executor that accepts remote connections from clients …\nTell the remote executor the name of the client or of the …\nStarts the Executor spawning the workers on new threads …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>LocalExecutor</code> based on a <code>FileStore</code> and ready to …\nMake a new <code>RemoteExecutor</code>.\nThe number of local workers to spawn.\nStart the executor binding the TCP sockets and waiting for …\nThe name of the client or of the worker.\nThe required version of task-maker.\nLocates the <code>task-maker-tools</code> executable.\nThe client is asking the server to send a file. After this …\nThe server needs the file with that Uuid. The client must …\nThe worker needs a file from the server. The server should …\nThe worker completed the execution and produced some …\nAn iterator over the byte chunks sent during the file …\nUtility function to send a file to a channel using <code>send_raw</code>…\nThe evaluation of the DAG is complete, this message will …\nThere was an error during the evaluation.\nThe client is asking to evaluate a DAG.\nMessages that the client sends to the server.\nMessages that the server sends to the client.\nAsk the worker to exit.\nThe worker is ready for some job. The worker will wait for …\nStop the current worker sandbox if currently running the …\nThe execution has completed with that result.\nThe execution has been skipped.\nThe execution has started on a worker.\nThe client is providing a file. After this message there …\nThe server is sending a file. After this message there is …\nThe worker is sending a file to the server. After this …\nThe file the workers as asked. After this message there is …\nThe client is asking for the server status. After this …\nThe server status as asked by the client.\nThe client is asking to stop the evaluation. All the …\nThe job the worker should do. Boxed to reduce the enum …\nMessages sent by the workers to the server.\nThe worker completed the job with this result producing …\nMessages sent by the server to the worker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new iterator over a receiver channel.\nSend a local file to a channel using <code>send_raw</code>.\nSend the file content to a channel using <code>send_raw</code>.\nThe list of the executions and files to keep track of.\nThe DAG to evaluate.\nThere was an error executing the sandbox.\nThe sandbox failed to execute the process, an error …\nThe list of all the system-wide readable directories …\nResponse of the internal implementation of the sandbox.\nWrapper around the sandbox. Cloning this struct will keep …\nResult of the execution of the sandbox.\nThe sandbox exited successfully, the statistics about the …\nThe sandbox has been executed successfully.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake the sandbox persistent, the sandbox directory won’t …\nTell the sandbox process to kill the underlying process, …\nMake a new sandbox for the specified execution, copying …\nPath of the file where that output file is written to (in …\nStarts the sandbox and blocks the thread until the sandbox …\nPath of the file where the standard error is written to …\nPath of the file where the standard output is written to …\nThe error reported by the sandbox.\nThe exit status of the process.\nResources used by the process.\nThe signal that caused the process to exit.\nWhether the sandbox killed the process.")