searchState.loadedDescShard("task_maker_dag", 0, "DAG generation and resulting structures for <code>Execution</code>s and …\nThe setting of the cache level.\nA file that is provided from a in-memory buffer.\nType of the priority value of a DAG.\nUse the cache as much as possible.\nUse the cache except for these tags.\nAn <code>Execution</code> is a process that will be executed by a …\nThe callbacks to be called when an event of an execution …\nCommand of an <code>Execution</code> to execute.\nA computation DAG, this is not serializable because it …\nThe set of callbacks of a DAG.\nConfiguration setting of an <code>ExecutionDAG</code>, some of the …\nSerializable part of the execution DAG: everything except …\nA group of executions that have to be executed …\nThe identifier of an execution group, it’s globally …\nAn input file of an <code>Execution</code>, can be marked as executable …\nLimits on an <code>Execution</code>. On some worker platforms some of …\nResources used during the execution, note that on some …\nThe result of an <code>Execution</code>.\nStatus of a completed <code>Execution</code>.\nA tag on an <code>Execution</code>. Can be used to classify the …\nThe identifier of an execution, it’s globally unique and …\nDirectory inside the sandbox where to place all the pipes …\nA First-in First-out channel for letting executions …\nThe identifier of a Fifo pipe inside a group.\nAn handle to a file in the evaluation, this only tracks …\nThe callbacks that will trigger when the file is ready.\nThe identifier of a file, it’s globally unique and it …\nType of the callback called when a file is returned to the …\nType of the callback called with the chunks of a file when …\nDAG-priority of executions that should run very soon, …\nThe sandbox failed to execute the program with the …\nA command relative to the sandbox directory, not to be …\nA file that is provided by the disk, knowing its path.\nThe program has exceeded the memory limit.\nNever use the cache.\nType of the callback called when an <code>Execution</code> ends.\nType of the callback called when an <code>Execution</code> is skipped.\nType of the callback called when an <code>Execution</code> starts.\nType of the priority value of an <code>Execution</code>.\nA wrapper around a <code>File</code> provided by the client, this means …\nThe program exited with a non-zero status code, which is …\nThe program stopped due to a signal, the number and the …\nThe program exited with status 0 within the limits.\nThe program hasn’t exited within the sys time limit …\nA system command, the workers will search in their <code>$PATH</code> …\nThe program hasn’t exited within the time limit …\nThe program hasn’t exited within the wall time limit …\nThe identifier of a worker, it’s globally unique and …\nWhere to write the file to with some other information.\nAdd an execution to the DAG.\nAdd a new execution to the group.\nAdd an execution group to the DAG.\nAdd a directory to the list of additional readable …\nWhether this file is valid even if the execution that …\nAllow multiple processes.\nAllow multiple processes (i.e. forking/threads).\nSets the command line arguments of the execution. Calling …\nThe list of command line arguments.\nBlock multiple processes.\nSet the cache mode for the executions of this DAG.\nThe cache mode for this DAG.\nThe list of callbacks for the items of the DAG.\nTell the executor to include the first <code>count</code> bytes of the …\nWhen not <code>None</code>, ask the sandbox to capture that many bytes …\nTell the executor to include the first <code>count</code> bytes of the …\nWhen not <code>None</code>, ask the sandbox to capture that many bytes …\nClone this <code>ExecutionDAG</code>. The callbacks are not cloned, and …\nWhich command to execute.\nA reference to the configuration of the underlying DAG.\nA reference to the configuration of the underlying DAG.\nThe configuration of this DAG.\nGet a mutable reference to the config of this DAG.\nAdd an environment variable to the execution copying the …\nEnvironment variables to copy from the sandbox host.\nSet whether to copy the executables of the compilation …\nWhether to copy the executables of the compilation inside …\nSet whether to copy the log files of some interesting …\nWhether to copy the log files of some interesting …\nSet the cpu time limit in seconds.\nLimit on the userspace cpu time of the process, in seconds.\nNumber of seconds the process used in user space.\nSerializable part of the DAG with all the executions and …\nDefault sane values for the execution limits, the limits …\nList of all the File dependencies of the execution, …\nDescription of the execution.\nA textual description of the group.\nDescription of the file.\nDestination path of the file to write.\nWhether to ignore all the subsequent calls to <code>write_file_to</code>…\nDo not write any file inside the task directory. This …\nAdd an environment variable to the execution.\nEnvironment variables to set.\nWhether this file should be marked as executable.\nWhether the file should be marked as executable.\nGet the list of registered execution callbacks.\nThe callbacks of the executions.\nAll the executions to run.\nThe list of executions to run.\nSet the extra memory to give to the executions before …\nExtra memory to give to the sandbox before killing the …\nExtra directory that can be read inside the sandbox.\nSet the extra time to give to the executions before being …\nExtra time to give to the sandbox before killing the …\nThe list of FIFO pipes to create for this group.\nUuid of the file.\nGet the list of registered file callbacks.\nThe callbacks of the files.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the maximum size of the files (in bytes) the process …\nMaximum size of the files (in bytes) the process can …\nCallback to be called with the first bytes of the file.\nCallbacks to be called with the chunks of a file ready.\nCall <code>callback</code> with the first <code>limit</code> bytes of the file when …\nCall <code>callback</code> with the chunks of the file when it’s …\nBind a file inside the sandbox to the specified file. …\nList of input files that should be put inside the sandbox.\nBuild a new <code>ExecutionStatus</code> as an <code>InternalError</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true only if it is …\nReturns true only if it is <code>ExecutionStatus::Success</code>.\nWhether to keep the sandbox directory of each execution.\nKeep the sandbox directory of each execution.\nLimits on the execution.\nGet a mutable reference to the execution limits.\nMake a new <code>ExecutionCommand::Local</code>.\nSet the memlock limit.\nRLIMIT_MEMLOCK\nSet the memory limit in KiB.\nLimit on the number of KiB the process can use in any …\nNumber of KiB used <em>at most</em> by the process.\nSet whether the process in the sandbox can use <code>/proc</code>.\nWhether the process in the sandbox can use <code>/proc</code>.\nSet whether the process in the sandbox can use <code>/dev/null</code> …\nWhether the process in the sandbox can use <code>/dev/null</code> and …\nThe name of the tag.\nMake a new <code>ExecutionDAGConfig</code>.\nCreate an empty ExecutionDAG, without files and executions.\nCreate a basic <code>Execution</code> with the default limits.\nCreate an empty execution group.\nCreate a new file handle.\nCreate a new <code>Fifo</code> and return it.\nSet the maximum number of opened file descriptors.\nLimit on the number of file descriptors the process can …\nThe callbacks called when the execution has completed.\nAdd a callback that will be called when the execution ends.\nAdd a callback that will be called when the execution is …\nAdd a callback that will be called when the execution …\nThe callbacks called when the execution has been skipped.\nThe callbacks called when the execution starts.\nHandle to a file produced by the execution. This should be …\nList of all the File produced by the execution, including …\nList of the output files that should be capture from the …\nSet the priority of this DAG.\nSet the priority of this <code>Execution</code>.\nPriority of this execution group. The actual value is …\nPriority of this DAG.\nA priority index for this execution. Higher values …\nProvide the content of a file for the computation.\nProvide a file for the computation.\nAll the files provided by the client.\nSet whether the process in the sandbox is not allowed to …\nWhether the process in the sandbox is not allowed to …\nResources used by the execution.\nThe path inside the sandbox that this pipe is mapped to.\nSet the stack limit.\nLimit on the stack size for the process in KiB.\nCompute the <code>ExecutionStatus</code> based on the result of the …\nStatus of the completed execution.\nHandle to the standard error of the execution. This should …\nOptional standard error to capture.\nCaptured standard error of the execution, if the capture …\nSet the stderr redirection path.\nWhen set, the standard error is redirected to this file. …\nBind the standard input to the specified file. Calling …\nOptional standard input to pass to the program.\nSet the stdin redirection path.\nWhen set, the standard input is redirected from this file. …\nHandle to the standard output of the execution. This …\nOptional standard output to capture.\nCaptured standard output of the execution, if the capture …\nSet the stdout redirection path.\nWhen set, the standard output is redirected to this file. …\nSet the sys time limit in seconds.\nLimit on the kernels pace cpu time of the process, in …\nNumber of seconds the process used in kernel space.\nMake a new <code>ExecutionCommand::System</code>.\nSet the tag of this <code>Execution</code>.\nThe tag of one of the executions in this group.\nThe tag associated with this execution.\nMake a <code>CacheMode</code> from the command line arguments:\nMake an empty limits where all the limits are disabled. …\nMark a file as urgent. The server will try to send it as …\nGet the list of urgent files.\nSet of the handles of the files that should be sent to the …\nUuid of the execution.\nThe UUID of this <code>Fifo</code>.\nThe unique identifier of this group of executions.\nUuid of the file.\nSet the wall time limit in seconds.\nLimit on the total time of execution, in seconds. This …\nNumber of seconds from the start to the end of the process.\nWhether the execution result come from the cache.\nWhether the execution has been killed by the sandbox.\nWhen <code>file</code> is ready it will be written to <code>path</code>. The file …\nSame as <code>write_file_to</code> but allowing failures.\nDestination of the file if it has to be stored in the disk …\nThe content of the file.\nThe file handle.\nThe file handle.\nThe key of the file for the lookup in the <code>FileStore</code>.\nThe key of the file for the lookup in the <code>FileStore</code>.\nPath to the file in the client.")